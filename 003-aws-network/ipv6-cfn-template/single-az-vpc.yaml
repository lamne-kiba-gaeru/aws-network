AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a VPC with a single AZ configuration with IPv6 support

Parameters:
  AvailabilityZone:
    Type: String
    Default: ap-northeast-1a
    Description: Availability Zone for the single AZ VPC

  VPCCIDRBlock:
    Type: String
    Default: 10.1.0.0/24
    Description: CIDR block for the Single AZ VPC

  PublicSubnetCIDRBlock:
    Type: String
    Default: 10.1.0.0/27
    Description: CIDR block for the public subnet

  PrivateSubnetCIDRBlock:
    Type: String
    Default: 10.1.0.32/27
    Description: CIDR block for the private subnet
    
  InstanceType:
    Type: String
    Default: t2.micro
    
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'

Resources:
  SingleAZVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDRBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: single-az-vpc

  # IPv6 アドレスの取得
  Ipv6Pool:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      AmazonProvidedIpv6CidrBlock: true
      VpcId: !Ref SingleAZVpc

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SingleAZVpc
      CidrBlock: !Ref PublicSubnetCIDRBlock
      AvailabilityZone: !Ref AvailabilityZone
      MapPublicIpOnLaunch: true
      # IPv6サブネットCIDRを割り当て
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt SingleAZVpc.Ipv6CidrBlocks ]]]
            SubnetPart: '04::/64'
      Tags:
        - Key: Name
          Value: single-az-public-subnet

  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref SingleAZVpc
      CidrBlock: !Ref PrivateSubnetCIDRBlock
      AvailabilityZone: !Ref AvailabilityZone
      # IPv6サブネットCIDRを割り当て
      AssignIpv6AddressOnCreation: true
      Ipv6CidrBlock:
        Fn::Sub:
          - "${VpcPart}${SubnetPart}"
          - VpcPart: !Select [ 0, !Split [ '00::/56', !Select [ 0, !GetAtt SingleAZVpc.Ipv6CidrBlocks ]]]
            SubnetPart: '05::/64'

      Tags:
        - Key: Name
          Value: single-az-private-subnet

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: single-az-igw

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref SingleAZVpc
      InternetGatewayId: !Ref InternetGateway

  # IPv6用のEgress-Only Internet Gateway
  EgressOnlyInternetGateway:
    Type: AWS::EC2::EgressOnlyInternetGateway
    Properties:
      VpcId: !Ref SingleAZVpc

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SingleAZVpc
      Tags:
        - Key: Name
          Value: single-az-public-rtb

  # IPv4用のパブリックルート
  PublicRouteIpv4:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # IPv6用のパブリックルート
  PublicRouteIpv6:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationIpv6CidrBlock: ::/0
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: single-az-nat-gateway

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref SingleAZVpc
      Tags:
        - Key: Name
          Value: single-az-private-rtb

  # IPv4用のプライベートルート
  PrivateRouteIpv4:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # IPv6用のプライベートルート
  PrivateRouteIpv6:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationIpv6CidrBlock: ::/0
      EgressOnlyInternetGatewayId: !Ref EgressOnlyInternetGateway

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable
      
  # EC2インスタンス用のセキュリティグループ
  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'single-az-ec2-sg'
      GroupDescription: 'Allow HTTP traffic and SSM access'
      VpcId: !Ref SingleAZVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 10.0.0.0/24
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref VPCCIDRBlock
        # IPv6ルールを追加
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIpv6: ::/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIpv6: !Select [0, !GetAtt SingleAZVpc.Ipv6CidrBlocks]
      Tags:
        - Key: Name
          Value: single-az-ec2-sg
          
  # EC2インスタンス用のIAMロール
  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
      Tags:
        - Key: Name
          Value: single-az-ec2-ssm-role
          
  # S3アクセス用のIAMポリシー
  S3AccessPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: S3AccessPolicy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 's3:GetObject'
              - 's3:ListBucket'
              - 's3:PutObject'
            Resource:
              - !Sub 'arn:aws:s3:::${AWS::StackName}-*'
              - !Sub 'arn:aws:s3:::${AWS::StackName}-*/*'
              - !Sub 'arn:aws:s3:::demo-vpc-endpoint-bucket-*'
              - !Sub 'arn:aws:s3:::demo-vpc-endpoint-bucket-*/*'
      Roles:
        - !Ref EC2InstanceRole

  # EC2インスタンスプロファイル
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  # EC2インスタンス
  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref EC2SecurityGroup
      IamInstanceProfile: !Ref EC2InstanceProfile
      # IPv6アドレスを有効化
      Ipv6AddressCount: 1
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          dnf install -y httpd
          echo "<h1>Hello from Single AZ VPC (IPv6 enabled)</h1>" > /var/www/html/index.html
          systemctl start httpd
          systemctl enable httpd
      Tags:
        - Key: Name
          Value: ec2-single-az

Outputs:
  SingleAZVpcId:
    Description: ID of the Single AZ VPC
    Value: !Ref SingleAZVpc

  VpcIpv6Cidr:
    Description: IPv6 CIDR Block of the VPC
    Value: !Select [0, !GetAtt SingleAZVpc.Ipv6CidrBlocks]

  PublicSubnetId:
    Description: ID of the public subnet
    Value: !Ref PublicSubnet

  PrivateSubnetId:
    Description: ID of the private subnet
    Value: !Ref PrivateSubnet
    
  PrivateRouteTableId:
    Description: ID of the Private Route Table
    Value: !Ref PrivateRouteTable
    
  EC2InstanceId:
    Description: ID of the EC2 Instance
    Value: !Ref EC2Instance