AWSTemplateFormatVersion: '2010-09-09'
Description: Creates a VPC public and private subnets, and an internet gateway


Parameters:
  AvailabilityZone1:
    Type: String
    Default: ap-northeast-1a  # ご自身の利用したいリージョンに合わせてください

  AvailabilityZone2:
    Type: String
    Default: ap-northeast-1c  # ご自身の利用したいリージョンに合わせてください
    
  InstanceType:
    Type: String
    Default: t2.micro
    
  LatestAmiId:
    Type: 'AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>'
    Default: '/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64'

  VPCCIDRBlock:
    Type: String
    Default: 10.0.0.0/24

  PublicSubnetaCIDRBlock:
    Type: String
    Default: 10.0.0.0/27

  PublicSubnetcCIDRBlock:
    Type: String
    Default: 10.0.0.32/27

  PrivateSubnetaCIDRBlock:
    Type: String
    Default: 10.0.0.64/27

  PrivateSubnetcCIDRBlock:
    Type: String
    Default: 10.0.0.96/27

  SgCIDRBlock:
    Type: String
    Default: 10.1.2.0/27

Resources:
  MyVpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VPCCIDRBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: vpc-demo

  PublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Ref PublicSubnetaCIDRBlock
      AvailabilityZone: !Ref AvailabilityZone1
      Tags:
        - Key: Name
          Value: public-subnet-a-demo

  PublicSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Ref PublicSubnetcCIDRBlock
      AvailabilityZone: !Ref AvailabilityZone2
      Tags:
        - Key: Name
          Value: public-subnet-c-demo

  PrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Ref PrivateSubnetaCIDRBlock
      AvailabilityZone: !Ref AvailabilityZone1
      Tags:
        - Key: Name
          Value: private-subnet-a-demo

  PrivateSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref MyVpc
      CidrBlock: !Ref PrivateSubnetcCIDRBlock
      AvailabilityZone: !Ref AvailabilityZone2
      Tags:
        - Key: Name
          Value: private-subnet-c-demo

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref MyVpc
      InternetGatewayId: !Ref InternetGateway

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: public-root-tbl

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetA
      RouteTableId: !Ref PublicRouteTable

  PublicSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnetC
      RouteTableId: !Ref PublicRouteTable
      
  # NATゲートウェイ用のElastic IP
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      
  # PublicSubnetAにNATゲートウェイを配置
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnetA
      Tags:
        - Key: Name
          Value: nat-gateway-demo

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref MyVpc
      Tags:
        - Key: Name
          Value: private-root-tbl
          
  # プライベートサブネットからNATゲートウェイへのルート
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  PrivateSubnetARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetA
      RouteTableId: !Ref PrivateRouteTable

  PrivateSubnetCRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnetC
      RouteTableId: !Ref PrivateRouteTable

  PublicSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'public-sg'
      GroupDescription: Allow HTTP traffic 
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref SgCIDRBlock
      Tags:
        - Key: Name
          Value: public-sg

  PrivateSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'private-sg'
      GroupDescription: Allow HTTP traffic 
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !GetAtt ALBSecurityGroup.GroupId
      Tags:
        - Key: Name
          Value: private-sg
          
  # ALB用のセキュリティグループ
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: 'alb-sg'
      GroupDescription: 'Security group for ALB'
      VpcId: !Ref MyVpc
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: alb-sg

  # EC2インスタンスA
  EC2InstanceA:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref PrivateSubnetA
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -x
          dnf install -y httpd
          echo "<h1>Hello from Private Subnet A</h1>" > /var/www/html/index.html
          systemctl start httpd
          systemctl enable httpd
      Tags:
        - Key: Name
          Value: ec2-private-a
          
  # EC2インスタンスC
  EC2InstanceC:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref InstanceType
      ImageId: !Ref LatestAmiId
      SubnetId: !Ref PrivateSubnetC
      SecurityGroupIds:
        - !Ref PrivateSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          dnf install -y httpd
          echo "<h1>Hello from Private Subnet C</h1>" > /var/www/html/index.html
          systemctl start httpd
          systemctl enable httpd
      Tags:
        - Key: Name
          Value: ec2-private-c

  # ALBの作成
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: demo-alb
      Scheme: internet-facing
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Subnets:
        - !Ref PublicSubnetA
        - !Ref PublicSubnetC
      Tags:
        - Key: Name
          Value: demo-alb
          
  # ALBのターゲットグループ
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: demo-tg
      Port: 80
      Protocol: HTTP
      VpcId: !Ref MyVpc
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      TargetType: instance
      Targets: 
        - Id: !Ref EC2InstanceA
        - Id: !Ref EC2InstanceC
          Port: 80

      Tags:
        - Key: Name
          Value: demo-tg
          
  # ALBリスナー
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
            
Outputs:
  LoadBalancerDNS:
    Description: DNS Name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    